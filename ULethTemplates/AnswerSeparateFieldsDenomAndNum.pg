## DESCRIPTION
##
## ENDDESCRIPTION


## DBsubject()
## DBchapter()
## DBsection()
## Date(2017-06-30)
## Institution(University of Lethbridge)
## Author(Olivia Henders & Nicole Wilson)
## MO(1)
## KEYWORDS('ULeth Template', 'fraction', 'separate answer blanks', 'separate numerator and denominator')


###########################
#  Initialization

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  # Allows answer boxes to be placed on top of each other (to imitate a fraction).
  "PGunion.pl",
  # Allows both student answers to be manipulated simultaneously.
  "parserMultiAnswer.pl",
  # Provides greater control over the layout of the problem.
  "PGML.pl",
  # Used for course-specific initializations.
  "PGcourse.pl",
  # Used to provide contextual help for how to type answers.
  "AnswerFormatHelp.pl"
);

TEXT(beginproblem());


##########################
#  Setup

#-ULETH-#
# Defines the variable y as being a real number within the context.
# Thus, when 'y' is included in the question or answer, it will be
# recognized as a real number variable instead of a letter.
Context("Numeric")->variables->are(y=>"Real");
# Disables the error message to help with the simplification feature.
Context()->{error}{msg}{"Operands of '*' can't be words"} = " ";

# Defines some random values that will be used for the fractions in the problem.
$a = random(2,8,2);
$b = random(3,9,2);
$c = non_zero_random(-9,9,1);

# Generates new random values for $c as long as it equals $b / $a.
while ($c == $b/$a)
{
  $c = random(1,9,1);
}

# Defines the fraction equation for the question, using the variables above
# and the Real variable y.
$fraction = "\frac{$a y}{y-$c} + \frac{$b}{$c - y} ";

# The correct answer numerator/denominator.
$num = Compute("$a y - $b");
$den = Compute("y - $c");

# Bogus numerator/denominator that result from not finding a common denominator.
# Used in the answer checker to check that the student hasn't just combined the
# two fractions.
$numbogus = Compute("$a*y+$b");
$denbogus = Compute("(y-$c)*($c-y)");
#-ENDULETH-#

# Defines the answer checker function that will check that the fraction is fully
# simplified and that a common denominator has been found.
$multians = MultiAnswer($num, $den)->with(
  singleResult => 0,
  allowBlankAnswers => 1,
  checker => sub {
      my ( $correct, $student, $self ) = @_;
      my ( $f1stu, $f2stu ) = @{$student};
      my ( $f1, $f2 ) = @{$correct};

      # Checks for positive and negative versions of the answer.
      if ( ( $f1==$f1stu &&  $f2==$f2stu) ||
           (-$f1==$f1stu && -$f2==$f2stu) ) {
          return [1,1];
      } elsif ( $f1==$f1stu || -$f1==$f1stu) {
          return [1,0];
      } elsif ( ($numbogus==$f1stu || -$numbogus==$f1stu) ||
                ($denbogus==$f2stu || -$denbogus==$f2stu) ) {
          $self->setMessage(1,"Find a common denominator first");
          $self->setMessage(2,"Find a common denominator first");
          return [0,0];
      } elsif ( $f2==$f2stu || -$f2==$f2stu ) {
          return [0,1];
      } elsif ( $f1*$f2stu==$f1stu*$f2 ) {
          $self->setMessage(1,"Simplify your answer further");
          $self->setMessage(2,"Simplify your answer further");
          return [0,0];
      } else {
          return [0,0];
      }
  }
);

# Display the fraction and answer blanks nicely.
# Special display method to display the fractions nicely and at a large font size.
Context()->texStrings;
if ($displayMode eq 'TeX') {
  $showfraction =
  "\[ $fraction = ".$multians->ans_rule(10).$multians->ans_rule(10)." \]";
} else {
  $showfraction =
  ColumnTable(
  "\( \displaystyle $fraction = \)",
  $multians->ans_rule(20).$BR.$HR.$multians->ans_rule(20),
  indent => 0, separation => 10, valign => "MIDDLE"
  );
}
Context()->normalStrings;



#################################
#  Main text

#-ULETH-#
# Initializes the problem text and answer formatting help.
# If you have LaTeX code you want to display, enter it here in the [``] brackets.
# If you want the previously-defined questions to display in LaTeX, include the
# MathObject in your LaTeX brackets.
# Calls the previously-assigned $showfraction to display the answer boxes.
BEGIN_PGML
Perform the indicated operations.
Express your answer in reduced form.

[$showfraction]*** [@ AnswerFormatHelp("numbers") @]*
END_PGML
#-ENDULETH-#


#################################
#  Answer evaluation

#-ULETH-#
# Setting this to 1 means that students will receive feedback on whether their
# answers are correct.
$showPartialCorrectAnswers = 1;

# Uses the standard all-or-nothing problem grader.
install_problem_grader(~~&std_problem_grader);

# Checks the answer using the multi-answer checker.  Change $multians to a
# single variable reference if there is only one part to the answer.
# If you add additional questions, make sure you add answer checkers for them here!
ANS( $multians->cmp() );
#-ENDULETH-#

#################################
#  Solution

#-ULETH-#
# Solution text to show after the due date.
# If you have LaTeX code you want to display, enter it here in the [``] brackets.
# If you want the previously-defined questions to display in LaTeX, include the
# MathObject in your LaTeX brackets.
BEGIN_PGML_SOLUTION
Solution explanation goes here.
END_PGML_SOLUTION

COMMENT('Uses PGML.');
#-ENDULETH-#

ENDDOCUMENT();
