## DESCRIPTION
## This is Problem 3.1.13 from the APEX Calculus text (3.1.16 in the ULETH APEX text). It covers graphical interpretation of extrema.  
## ENDDESCRIPTION

## DBsubject(Calculus - single variable)
## DBchapter(Applications of differentiation)
## DBsection(Global extrema)
## Level(2)
## Institution('Valdosta State University')
## Author('S. V. Ault')
## RevisedBy('F. J. Francis')
## TitleText1('APEX Calculus')
## AuthorText1('Hartman')
## EditionText1('3.0')
## Section1('3.1')
## Problem1('13')
## MO(1)
## Keywords('extrema', 'absolute maximum minimum', 'relative extrema', 'ULETH-MATH1560', 'ULETH-MATH1565')

##############################
#  Initialization

DOCUMENT();

# Contains a comma-separated list of macro filename strings.
# Each file contains functionality necessary for the mathematical
# functions being used in the problem.
loadMacros(
  # REQUIRED: Used for basic question and answer operations.
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "PGanswermacros.pl",
  # REQUIRED: Used for expression parsing.
  "MathObjects.pl",
  # Used to provide contextual help for how to type answers.
  "AnswerFormatHelp.pl",
  # Needed to support graph generation.
  "PGgraphmacros.pl",
  # Allows the graph and text to be placed in side-by-side columns.
  "unionTables.pl",
  "niceTables.pl",
  # Provides greater control over the layout of the problem.
  "PGML.pl",
  "parserRadioButtons.pl"
);

# Sets up basic problem information.
TEXT(beginproblem());


#############################
#   Setup

# Refreshes the graph image every time the page is loaded, as opposed to
# retrieving a cached version.
$refreshCachedImages = 1;

# Assumptions for the graph and values:
# 1. The origin is always visible in the graph image and is at (0,0).
# 2. Every integer value on each axis should be labelled.
# 3. The graph is in terms of x & y.
# 4. The desired x & y limits will be within the horizontal
#    and vertical range of the graph, but may not be at the
#    edge of the graph.

#-ULETH-#
# Random values for the function/graph.
$a = random(-0.5,-0.2,0.1);
$b = random(3,7,2);
$m = random(0.2,0.5,0.1);
$b1 = $b - 1;

# Functions to graph.
$f1 = Formula("x^{$b} + $m");
$f2 = Formula("-x + $m");

$x1 = $a;
$x2 = 0;
$x3 = $m;

$y1 = $f1->eval(x=>$x1);
$y2 = $m;
$y3 = $f2->eval(x=>$x3);

# Used to define the graph's size.
$desiredMinX = 0;
$desiredMaxX = 0;
$desiredMinY = 0;
$desiredMaxY = 0;
# The display size for the graph when the student clicks it to enlarge it.
$graphImageWidth=400;
$graphImageHeight=400;
#-ENDULETH-#

Context("Numeric");

# Set up the min and max values based on the user-provided values.
$minX = $desiredMinX;
$maxX = $desiredMaxX;
$minY = $desiredMinY;
$maxY = $desiredMaxY;
# Swaps the min and max values if they end up in the wrong places.
if ($minX > $maxX)
{
  $hold = $maxX;
  $maxX = $maxX;
  $minX = $hold;
}
if ($minY > $maxY)
{
  $hold = $maxY;
  $maxY = $minY;
  $minY = $hold;
}

# Position of the y-axis.
$originX = 0;
# Position of the x-axis.
$originY = 0;

if ($minX < 0)
{
  $minX = $originX + $minX - 2;
}
else
{
  $minX = $originX - $minX - 2;
}

if ($maxX < 0)
{
  $maxX = $originX - $maxX + 2;
}
else
{
  $maxX = $originX + $maxX + 2;
}

if ($minY < 0)
{
  $minY = $originY + $minY - 2;
}
else
{
  $minY = $originY - $minY - 2;
}

if ($maxY < 0)
{
  $maxY = $originY - $maxY + 2;
}
else
{
  $maxY = $originY + $maxY + 2;
}

$gridHoriz = $maxX-$minX;
$gridVert = $maxY-$minY;

# init_graph arguments: minX, minY, maxX, maxY, origin, gridSize, graphSize
$gr = init_graph($minX,$minY,$maxX,$maxY,axes=>[$originX,$originY],grid=>[$gridHoriz,$gridVert]);
# Resets all the graph labels.
$gr -> lb('reset');

#-ULETH-#
#  Graph labels and functions
#
# Label arguments: xPosition, yPosition, labelText, colour, xJustification, yJustification
$gr -> lb(new Label ( $maxX-0.5,$originY+0.15,'x','black','left','bottom'));
$gr -> lb(new Label ( $originX+0.15,$maxY-.5,'y','black','left','bottom'));
#$gr -> lb(new Label ( $a,0.25,'y = f(x)','black','left','bottom'));

# Initializes the x-axis positive and negative number labels.
for(my $i = $minX; $i < $maxX; $i++) {
  if ($i != 0)
  {
    $gr -> lb(new Label ( $i,$originY-0.25, "$i",'black','center','middle'));
  }
}
# foreach my $i (1..-$minX-1) {
#   $gr -> lb(new Label (-$i,$originY-0.25,-$i,'black','center','middle'));
# }

# Initializes the y-axis positive and negative number labels.
for(my $i = $minY; $i < $maxY; $i++) {
  if ($i != 0)
  {
    $gr -> lb(new Label ($originX-0.25,$i,"$i",'black','center','middle'));
  }
}

#Insert a graph of the listed functions (up to 4).
#-ULETH-#
# The line is drawn in orange with a weight of 2.
# If you want to change the colour, change the RGB code following the colour name.
# If you change the name of the colour, you will have to also change it in the
# add_functions line below.
$gr->new_color("orange", 255,153,0);
$gr->new_color("bl", 102, 153, 204); 
# Adds the function to the graph using x values between $minX and $maxX.
add_functions($gr, "$f1 for x in [-2,$x1] using color:orange weight:2");
add_functions($gr, "$f1 for x in [$x1,$x2] using color:orange weight:2");
add_functions($gr, "$f2 for x in [$x2,$x3] using color:orange weight:2");
add_functions($gr, "$f2 for x in [$x3,2] using color:orange weight:2");

# Add labels to the relevant points on the graph
$gr->lb( new Label($x1,$y1-0.1,'A',
    'black','center','middle'));
$gr->lb( new Label(0.05,$y2+0.1,'B',
    'black','center','middle'));
$gr->lb( new Label($x3,$y3-0.1,'C',
    'black','center','middle'));


# Set up the Multiple Choice answers

$mc1 = new_checkbox_multiple_choice();
$mc1 -> qa (
"At \(A\), there is a/an",
"None of the above"
);
$mc1 -> makeLast("Absolute maximum", "Absolute minimum", "Relative maximum", "Relative minimum","None of the above");

$mc2 = new_checkbox_multiple_choice();
$mc2 -> qa (
"At \(B\), there is a/an",
"Absolute maximum",
"Relative maximum"
);
$mc2 -> makeLast("Absolute maximum", "Absolute minimum", "Relative maximum", "Relative minimum","None of the above");

$mc3 = new_checkbox_multiple_choice();
$mc3 -> qa (
"At \(C\), there is a/an",
"None of the above"
);
$mc3 -> makeLast("Absolute maximum", "Absolute minimum", "Relative maximum", "Relative minimum","None of the above");

$ans1 = Compute("$b*($x1)^{$b1}");
$ans2 = "DNE";
$ans3 = -1;

#-ENDULETH-#


#############################
#  Main Text

#-ULETH-#

BEGIN_PGML

The graph of  [`f(x)`] is shown below, where

[``
  f(x) = \begin{cases}
    [$f1] & x\leq 0 \\
    [$f2] & x > 0.
    \end{cases}
``]

Below, evaluate [`f'(x)`] at the points indicated in the graph ([@ AnswerFormatHelp("numbers") @]*). Enter *DNE* if the function is not differentiable at the given point.

Identify the points as being an absolute maximum or minimum, a relative maximum or minimum, or none of the above.  
(Select all that apply.)

END_PGML

$columnA = PGML::Format2(<<'END_PGML');

[`A = ([$x1], [$y1])`]:

[`f'([$x1]) = `] [_____] 

[@ $mc1->print_q() @]* [@ $mc1->print_a() @]*

[`\mbox{}`]

[`B = ([$x2], [$y2])`]:

[`f'([$x2]) = `] [_____] 

[@ $mc2->print_q() @]* [@ $mc2->print_a() @]*

END_PGML

$columnB = PGML::Format2(<<'END_PGML');

[`C = ([$x3], [$y3])`]:

[`f'([$x3]) = `] [_____] 

[@ $mc3->print_q() @]* [@ $mc3->print_a() @]*

END_PGML

# Places the graph image in column2 (the rightmost) of the layout table.
# The additional arguments after insertGraph($gr) specify the width and height
# of the image when it's on-screen, while the tex_size is a percentage multiplier
# determining what size the image will print at in a hard copy version.
$column2 = image(insertGraph($gr), width=>$graphImageWidth, height=>$graphImageHeight, tex_size=>600).
$BR.$BCENTER.$BR."".$ECENTER;
#-ENDULETH-#
$column1 = ColumnTable($columnA, $columnB, indent => 0, separation => 30,align=>"CENTER", valign => "TOP");

TEXT($BR.ColumnTable($column2, $column1, indent => 0, separation => 30, valign => "MIDDLE"));


#############################
#  Answer Evaluation

#-ULETH-#
# Setting this to 1 means that students will receive feedback on whether their
# answers are correct.
$showPartialCorrectAnswers = 0;


ANS( Compute($ans1)->cmp());
ANS( checkbox_cmp( $mc1->correct_ans() ) );
ANS( Compute($ans2)->cmp());
ANS( checkbox_cmp( $mc2->correct_ans() ) );
ANS( Compute($ans3)->cmp());
ANS( checkbox_cmp( $mc3->correct_ans() ) );
# If you add additional questions, make sure you add answer checkers for them here!

#-ENDULETH-#


#############################
#   Solution

#-ULETH-#
# Solution text to show after the due date.
# If you have LaTeX code you want to display, enter it here in the [``] brackets.
# If you want the previously-defined questions to display in LaTeX, include the
# MathObject in your LaTeX brackets.
BEGIN_PGML_SOLUTION
We may differentiate [`f(x)`] to determine that

[``
  f'(x) = \begin{cases}
    [$b] x^{[$b1]} & x < 0\\
    1 & x > 0 \\
    \end{cases}
``]

Now since

[``  \lim_{x \to 0^-} ([$b] x^{[$b1]}) = 0 \neq
  \lim_{x \to 0^+} 1
,``]

the function [`f`] is not differentiable at [`x = 0`]. This indicates the possibility of a relative extremum at [`x = 0`].  According to the graph, there is a relative and absolute maximum at this point.

There are no extrema at points [`A`] or [`C`], since the
derivative values are nonzero there. In particular, [` f'([$x1]) =[$b]([$x1])^{[$b1]} = [$ans1]`] and [` f'([$x3]) = [$b]([$x3])^{[$b1]} = [$ans3].`]


END_PGML_SOLUTION

COMMENT('
    Randomization provides 80 different possible versions of this question. 
    Includes a solution set.<BR>
    Made from a ULETH template.<BR>
    ');
#-ENDULETH-#

# Marks the end of the problem document.
ENDDOCUMENT(); 
