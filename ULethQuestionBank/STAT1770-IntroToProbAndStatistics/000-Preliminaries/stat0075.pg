## DESCRIPTION
# This problem displays a geogebra dotplot graph with 4 different distributions of scores (labeled quiz A-D) and the student is asked to arrange the distribtions from largest to smallest standard deviation, using tiles that correspond to the 4 quizzes. 1 of the 4 quizzess has its values fixed (so it is always clearly recgonized as having the highest std) and 3 of the distribtutions retain the same shape but are randomly shifted. Which distributions are designated with which quiz letters is always random, as are their colors and their vertical positions. There is a significant amount of code that handles this random shuffling. Colorblind friendly colors are chosen.
# This problem tests a student's ability to discern relative differences is standard deviations from a visual representation without doing any calculations (the distributions are such that ambiguity about relative standard deviations is minimal). 
## ENDDESCRIPTION

## DBsubject('Statistics')
## DBchapter('Experimental Design')
## DBsection('Concepts')
## Date(2017-05-11)
## Institution(University of Lethbridge)
## Author(Kyler Fisher, Adopted from template by Olivia Henders & Nicole Wilson)
## MO(1)
## KEYWORDS('multiple choice', 'ULETH-STAT1770', 'dot plot', 'dot-plot', 'standard deviation')


###########################
#  Initialization

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  # Used to support the GeoGebra applet.
  "AppletObjects.pl",
  # Formats problem data into two layout columns.
  "unionTables.pl",
  # Provides course-specific initializations.
  "PGcourse.pl",
  "PGML.pl",
  # Used for drop down responses.
  "parserPopUp.pl",
  # REQUIRED: Used for expression parsing.
  "MathObjects.pl",
  "draggableProof.pl",
);

TEXT(beginproblem());


##########################################
#  Setup

#-ULETH-#

#This section randomly arranges the integers [0-3] into an array. Later used to arrange distribtutions vertically.
@order;
do{
for ($i=0; $i < 4; $i++){
    $order[$i] = random(0,3)
    }
    $allDifferent = 1;
    for ($i=0; $i < 4; $i++){
        for ($j=0; $j < 4; $j++){
            if($order[$i] == $order[$j] and $i != $j)
            { $allDifferent = 0 }
        }
    }
} while ($allDifferent == 0); #keep selecting new values until they are all different

#This section randomly arranges the integers [0-3] into an array. Later used to assign colors randomly.
@colorNames = ("Red","Gold","Orange","Brown");
@colors;
do{
for ($i=0; $i < 4; $i++){
    $colors[$i] = random(0,3);
    }
    $allDifferent = 1;
    for ($i=0; $i < 4; $i++){
        for ($j=0; $j < 4; $j++){
            if($colors[$i] == $colors[$j] and $i != $j)
            { $allDifferent = 0 }
        }
    }
} while ($allDifferent == 0); #keep selecting new values until they are all different

#This section randomly arranges the integers [0-3] into an array. Later used to assign the letters randomly.
@lettersStr = ("A", "B", "C", "D");
@letters;
do{
for ($i=0; $i < 4; $i++){
    $letters[$i] = random(0,3)
    }
    $allDifferent = 1;
    for ($i=0; $i < 4; $i++){
        for ($j=0; $j < 4; $j++){
            if($letters[$i] == $letters[$j] and $i != $j)
            { $allDifferent = 0 }
        }
    }
} while ($allDifferent == 0); #keep selecting new values until they are all different

# this section is the setup for the tile arrangment part
$CorrectProof = DraggableProof([ 
"Quiz ".$lettersStr[$letters[0]],
"Quiz ".$lettersStr[$letters[2]],
"Quiz ".$lettersStr[$letters[3]],
"Quiz ".$lettersStr[$letters[1]],
],[],
#Put all the entries under the left column and specify these as SourceLabel
#TargetLabel is the column after ordering all the entries 
SourceLabel => "Choose from the quizzes here:",
TargetLabel =>  "Place in order by standard deviation below (greatest standard deviation at top and smallest at bottom):",
);

#This section is to assign the correct heights that are needed for the horizontal lines that seperate the distribtions and to determine where how much each plots needs to be shifted upwards (depending on which plots are before it in order and their heights). Needed because the vertical placement of the distributions is randomized.
@plotHeights;
@lineHeights;
$lineHeightSum = 0;
$plotHeightSum = 0;
for ($i=0; $i < 4; $i++){
    if($order[$i] == 0) { $plotHeights[$i] = $plotHeightSum; $plotHeightSum  = $plotHeightSum + 7; #if distribution 0, set plot height to current height plus height of this plot, 7 -- #increment the plot height by this amount
    $lineHeights[$i] = 7 + $lineHeightSum; #if distribution 0, set line height to current line height plus height of this plot, which is 7
    $lineHeightSum = $lineHeightSum + 7; } #increment the line height
    
    if($order[$i] == 1) { $plotHeights[$i] = $plotHeightSum; $plotHeightSum  = $plotHeightSum + 2; #if distribution 1, set plot height to current height plus height of this plot, 2 -- #increment the plot height by this amount
    $lineHeights[$i] = 2 + $lineHeightSum; #if distribution 1, set line height to current line height plus height of this plot, which is 2
    $lineHeightSum = $lineHeightSum + 2; } #increment the line height
    
    if($order[$i] == 2) { $plotHeights[$i] = $plotHeightSum; $plotHeightSum  = $plotHeightSum + 10; #if distribution 2, set plot height to current height plus height of this plot, 10 -- #increment the plot height by this amount
    $lineHeights[$i] = 10 + $lineHeightSum; #if distribution 2, set line height to current line height plus height of this plot, which is 10
    $lineHeightSum = $lineHeightSum + 10; } #increment the line height
    
    if($order[$i] == 3) { $plotHeights[$i] = $plotHeightSum; $plotHeightSum  = $plotHeightSum + 5; #if distribution 3, set plot height to current height plus height of this plot, 5 -- #increment the plot height by this amount
    $lineHeights[$i] = 5 + $lineHeightSum; #if distribution 3, set line height to current line height plus height of this plot, which is 5
    $lineHeightSum = $lineHeightSum + 5; } #increment the line height
}
for ($i=0; $i < 4; $i++){ $lineHeights[$i] = $lineHeights[$i] + 0.5 } #shift all line heights up by 0.5 (so they fit between plots)

# assign quizHeights from array, used to pass commands into GeoGebra
for ($i=0; $i < 4; $i++){
    if($order[$i] == 0) { $QuizDHeight = $plotHeights[$i] }
    if($order[$i] == 1) { $QuizCHeight = $plotHeights[$i] }
    if($order[$i] == 2) { $QuizBHeight = $plotHeights[$i] }
    if($order[$i] == 3) { $QuizAHeight = $plotHeights[$i] }
}

#set the distribution with the highest std and create the string for it to pass command into GeoGebra
@highestSTD = (1,1,1,1,1,10,10,10,10,10);
$QuizA = join(",", @highestSTD);
$QuizA = "{".$QuizA."}";

#set the distribution with the lowest std and create the string for it to pass command into GeoGebra
$val = random(1,9);
@lowestSTD = ($val,$val,$val,$val,$val,$val,$val,$val,$val,$val);
$QuizB = "{".join(",", @lowestSTD)."}";

#set the distribution with the lower std (with help of a random shift) and create the string for it to pass command into GeoGebra
@lowSTD = (0,0,1,1,1,1,1,1,2,2);
$shiftLowSTD = random(1,8);
for($i=0; $i < 10; $i++){$lowSTD[$i] = $lowSTD[$i] + $shiftLowSTD; }
$QuizD = "{".join(",", @lowSTD)."}";

#set the distribution with the higher std (with help of a random shift) and create the string for it to pass command into GeoGebra
@highSTD = (0,0,1,1,2,2,3,3,4,4);
$shiftHighSTD = random(1,5);
for($i=0; $i < 10; $i++){$highSTD[$i] = $highSTD[$i] + $shiftHighSTD; }
$QuizC = "{".join(",", @highSTD)."}";


#################################################
# How many data points are in the graph.
$numPoints = 20;
# Number of units above the x-axis the image is drawn.
$yOffset = 2.5;
# Height of the box.
$yScale = 1.25;

# Set the bounds of the graph.
$minX = -3;
$minY = -3.5;
$maxX = 10.7;
$maxY = 26.5;
#-ENDULETH-#


######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the
# command end command so that they don't get in the way.
# See the note down there for more information.
###################################

#-ULETH-#
# Choose an appropriate name for your applet.  Can also leave as ggbfoo.
$appletName = "ggbfoo";
#-ENDULETH-#

$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "geogebra.jar",
   codebase                 => findAppletCodebase("geogebra.jar"),
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => 'configure',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   #-ULETH-#
   width                 => 500,              # may want to modify width
   height                => 500,              # may want to modify height
   #-ENDULETH-#
   # mayscript             => "true",
   #-ULETH-#
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   #-ENDULETH-#
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   #submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   submitActionScript => '',
   selfLoading           => 1,

   # Defined as a separate subroutine so the parameters can go at the bottom of
   # the page.
   params     => GEOGEBRA_PARAMS(),# paste parameters in

);


##################################
# Setup GeogebraWebApplet --
###################################

###############################################
#
#  For persistence of GeoGebra applet state
#  when answers are submitted or page is refreshed.
#  Uses JavaScript interface to GeoGebra.
#  This fetches the GeoGebra applet with $appletname.
#  Note that this variable gets set in the "Create link to applet" section.

HEADER_TEXT(
qq!
<script language="javascript">
   function ggbOnInit(param) {
       if (param == "$appletName") {
           applet_loaded(param,1);  // report that applet is ready.
           ww_applet_list[param].safe_applet_initialize(2);
       }
   }
</script>
<noscript>For this question to work properly,
you must enable JavaScript, or use another browser
(or computer) on which JavaScript works.</noscript>
!);


#######################################################
#
#  For setting initial values in GeoGebra from WeBWorK
#  Uses JavaScript interface to GeoGebra.
#  Note the area right under all the ///////////////.
#  This is where you match up your variables from WeBWorK
#  with your variables in GeoGebra.

TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setAppletCoefficients() {
   var applet=getApplet("$appletName");   // alert("Updating coefficients");
   if (typeof(applet)!="undefined") {
     if (typeof(applet.setValue)!="undefined") {

     ////////////////////////////////////////////////////////////////
     //  List the values of the parameters to be set in the applet here

          // Set variables for GeoGebra from WebWork
          applet.setValue("yOffset", $yOffset); // the number of units above the        x-axis the image is drawn
          applet.setValue("yScale", $yScale); // the height of the box
          // #-ULETH-#
          // Raw data variables get set here.  Do not change values here!
          // You can, however, comment/uncomment lines to match the number of
          // data points you are passing in.
          //applet.setListValue("xList",1,$dataSet[0]);
          //applet.setListValue("xList",2,$dataSet[1]);
          //applet.setListValue("xList",3,$dataSet[2]);
          //applet.setListValue("xList",4,$dataSet[3]);
          //applet.setListValue("xList",5,$dataSet[4]);
          //applet.setListValue("xList",6,$dataSet[5]);
          //applet.setListValue("xList",7,$dataSet[6]);
          //applet.setListValue("xList",8,$dataSet[7]);
          //applet.setListValue("xList",9,$dataSet[8]);
          //applet.setListValue("xList",10,$dataSet[9]);
          //applet.setListValue("xList",11,$dataSet[10]);
          //applet.setListValue("xList",12,$dataSet[11]);
          //applet.setListValue("xList",13,$dataSet[12]);
          //applet.setListValue("xList",14,$dataSet[13]);
          //applet.setListValue("xList",15,$dataSet[14]);
          //applet.setListValue("xList",16,$dataSet[15]);
          //applet.setListValue("xList",17,$dataSet[16]);
          //applet.setListValue("xList",18,$dataSet[17]);
          //applet.setListValue("xList",19,$dataSet[18]);
          //applet.setListValue("xList",20,$dataSet[19]);
          //applet.setListValue("xList",21,$dataSet[20]);
          //applet.setListValue("xList",22,$dataSet[21]);
          //applet.setListValue("xList",23,$dataSet[22]);
          //applet.setListValue("xList",24,$dataSet[23]);
          //applet.setListValue("xList",25,$dataSet[24]);
          //applet.setValue("outliers",1); // To show outliers set to 1, otherwise set this to 0
          // Changing the text value will change the label text on the graph, and
          // the coordinates at the end represent the point on the graph's grid
          // where the label will be placed.
          applet.evalCommand("ZoomIn[$minX,$minY,$maxX,$maxY]");
          applet.evalCommand("A = DotPlot[$QuizA]+(0,$QuizAHeight)");
          applet.evalCommand("D = DotPlot[$QuizD]+(0,$QuizDHeight)");
          applet.evalCommand("B = DotPlot[$QuizB]+(0,$QuizBHeight)");
          applet.evalCommand("C = DotPlot[$QuizC]+(0,$QuizCHeight)");
          applet.evalCommand("SetColor(A, $colorNames[$colors[0]])");
          applet.evalCommand("SetColor(B, $colorNames[$colors[1]])");
          applet.evalCommand("SetColor(C, $colorNames[$colors[2]])");
          applet.evalCommand("SetColor(D, $colorNames[$colors[3]])");
          //
          applet.evalCommand("A1 = (0,$lineHeights[0])");
          applet.evalCommand("A2 = (10.5,$lineHeights[0])");
          applet.evalCommand("lineA = Segment[A1, A2]");
          applet.evalCommand("SetCoords(text1, -2.25, $QuizAHeight+2)");
          applet.evalCommand("text1 = \"Quiz $lettersStr[$letters[0]]\"");
          //
          applet.evalCommand("B1 = (0,$lineHeights[1])");
          applet.evalCommand("B2 = (10.5,$lineHeights[1])");
          applet.evalCommand("lineB = Segment[B1, B2]");
          applet.evalCommand("SetCoords(text2, -2.25, $QuizBHeight+5)");
          applet.evalCommand("text2 = \"Quiz $lettersStr[$letters[1]]\"");
          //
          applet.evalCommand("C1 = (0,$lineHeights[2])");
          applet.evalCommand("C2 = (10.5,$lineHeights[2])");
          applet.evalCommand("lineC = Segment[C1, C2]");
          applet.evalCommand("SetCoords(text3, -2.25, $QuizCHeight+1)");
          applet.evalCommand("text3 = \"Quiz $lettersStr[$letters[2]]\"");
          //
          applet.evalCommand("D1 = (0,$lineHeights[3])");
          applet.evalCommand("D2 = (10.5,$lineHeights[3])");
          applet.evalCommand("lineD = Segment[D1, D2]");
          applet.evalCommand("SetCoords(text4, -2.25, $QuizDHeight+3)");
          applet.evalCommand("text4 = \"Quiz $lettersStr[$letters[3]]\"");
          //
          
          // #-ENDULETH-#
     } else {
          setTimeout("setAppletCoefficients()", 1000);
     }
   } else {
      setTimeout("setAppletCoefficients()",1000);
   }
}
ww_applet_list["$appletName"].setConfig = function() {setAppletCoefficients()};
</script>
END_SCRIPT


#######################################
# TEXT
#######################################

#-ULETH-#
# Initializes the problem text and answer formatting help.
# If you have LaTeX code you want to display, enter it here in the [``] brackets.
# If you want the previously-defined questions to display in LaTeX, include the
# MathObject in your LaTeX brackets.
BEGIN_PGML

10 students are taking a statistics course. The course has 4 quizzes labeled Quiz A - Quiz D. For each quiz, students are given a grade from 0 - 10. Below are the distributions of scores for the 10 students on the 4 quizzes represented in a *dot plot* format. In a dot plot, each dot represent an observation. In this dot plot, when dots are stacked, it means numerous students recieved the same quiz score for that quiz.

[@
ColumnTable("",
$BCENTER.
$BBOLD."Quiz Scores for 10 Students on 4 Different Quizzes".$EBOLD.$PAR.
MODES(HTML=>$applet->insertAll(debug=>0, includeAnswerBox=>0,), TeX=>$im).
$ECENTER
,
indent => 0, separation => 30, valign => "MIDDLE"
);
@]*

Arrange the the tiles for the 4 quizzes below by their *standard deviations*. Put the quiz with the _greatest_ standard deviation at the top and continue placing tiles below in order of decreasing standard deviation so that the quiz at the bottom has the _lowest_ standard deviation. 

END_PGML


BEGIN_TEXT
$BR$BR
$BBOLD NOTE: You must drag the tile to the top of the right column then move it down into place. $EBOLD
$PAR
\{ $CorrectProof->Print \}

END_TEXT


#########################################
# ANSWER section
#########################################

#-ULETH-#
# Setting this to 1 means that students will receive feedback on whether their
# answers are correct.
$showPartialCorrectAnswers = 0;
ANS($CorrectProof->cmp);

#########################################
# The applet as a base64 string
#########################################

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"false" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false",
showMenuBar=>"false" ,
showToolBar=>"false",
showAlgebraInput=>"false",
useBrowserForJS=>"true",
#-ULETH-#
# In the GeoGebra desktop application, create your applet.  Once you are done,
# press Ctrl + Shift + B.  This will copy the base64 string (like the one below)
# to your clipboard.  Paste this string between the double quotes below.  Make
# sure not to paste over the }; or $result lines that follow this section.
# You should end up with (e.g. ggbbase64=>"skj8981519+!KJ!MSD!.....") as the
# parameter below.
ggbbase64=>""
#-ENDULETH-#
};

$result;
}

############################
#  Solution

#-ULETH-#
# Solution text to show after the due date.
# If you have LaTeX code you want to display, enter it here in the [``] brackets.
# If you want the previously-defined questions to display in LaTeX, include the
# MathObject in your LaTeX brackets.
BEGIN_PGML_SOLUTION

The standard deviation is a measure of the variability of data. Distributions with values that are far apart, on average, will have a larger standard deviation that similar data with values that are, on average, closer together. The standard deviation for a distribution of numbers is roughly the average positive distance that those numbers are from their mean.

Quiz [$lettersStr[$letters[0]]] above has the largest standard deviation of the four quizzes. This is because the scores for Quiz [$lettersStr[$letters[0]]] are all far from their mean which is 5.5, right in between the two columns of scores. So although many of the students recieved the same scores for Quiz [$lettersStr[$letters[0]]], the variability of the data, reflected by the standard deviation, is high relative to the other Quizzes. 

Quiz [$lettersStr[$letters[1]]] above has the smallest standard deviation of the four quizzes. This is because all of the values are positioned exactly at their mean, because all the students recieved the same score on this quiz. There is no variability for the distribution of scores on Quiz [$lettersStr[$letters[1]]] and the standard deviation is 0!


Quiz [$lettersStr[$letters[2]]] has a relatively high standard deviation although it is not as extreme as Quiz [$lettersStr[$letters[0]]]. Quiz [$lettersStr[$letters[2]]] has a greater standard deviation than Quiz [$lettersStr[$letters[3]]] because the scores for [$lettersStr[$letters[3]]] are more closely bunched around their mean.



END_PGML_SOLUTION

COMMENT('GeoGebra question reuqiring students to interpret a dotplot graph with 4 distributions (arranged vertically) and arrange the relative standard deviations using tiles. <BR>
        Distributions are randomly arranged vertically, randomly assigned colors, are randomly assigned from 4 letters, and 3 of the distribtutions are randomly shifted although the shapes of all distributions are retained.
        Graph may not render on editor screen, but renders for students. <BR>
        Includes a solution set.<BR>
        
        Uses PGML. <BR>
Uses GeoGebraWeb (JavaScript), so it should work on computers and tablets.');
#-ENDULETH-#

ENDDOCUMENT();
