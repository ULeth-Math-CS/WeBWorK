## DESCRIPTION
## This question code is based on a sample problem from the WeBWorK wiki.
## It has been modified to meet the ULeth Template standards.
## ENDDESCRIPTION

## DBsubject(WeBWorK)
## DBchapter(WeBWorK tutorial)
## DBsection(PGML tutorial 2017)
## Date(2017-05-19)
## Institution(University of Lethbridge)
## Author(Olivia Henders & Nicole Wilson)
## KEYWORDS('weighted grading')


#############################
#  Initialization

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  # Macros for multiple choice, matching, and true/false questions.
  "PGchoicemacros.pl",
  # Needed to support graph generation.
  "PGgraphmacros.pl",
  # Allows weights to be assigned to each answer blank.  Not needed if standard
  # grading is being used.
  "weightedGrader.pl",
  "parserPopUp.pl",
  # Allows the graph and text to be placed in side-by-side columns.
  "unionTables.pl",
  # Provides greater control over the layout of the problem.
  "PGML.pl",
  # Used for course-specific initializations.
  "PGcourse.pl",
);

TEXT(beginproblem());


#############################
#  Setup

#-ULETH-#
# Changes the grader to use the weighted one.  Not needed if a standard grader
# is used.
install_weighted_grader();
#-ENDULETH-#

# Refreshes the graph image every time the page is loaded, as opposed to
# retrieving a cached version.
$refreshCachedImages = 1;

#-ULETH-#
# Used to define the graph's size.
$minXL = -1;
$minYL = -1;
$maxXL = 9;
$maxYL = 9;
# The number of tick marks on each axis.
$ticksXL = 10;
$ticksYL = 10;
# Origin point for the graph.
$originXL = 0;
$originYL = 0;
# The display size for the graph when the student clicks it to enlarge it.
$pixelHorizL = 500;
$pixelVertL = 500;
#-ENDULETH-#

# Construct a graph for the left endpoint Riemann sum.
# init_graph arguments: minX, minY, maxX, maxY, origin, gridSize, graphSize
$graphL = init_graph($minXL,$minYL,$maxXL,$maxYL,ticks=>[$ticksXL,$ticksYL],
                     axes=>[$originXL,$originYL],pixels=>[$pixelHorizL,$pixelVertL]);

# Set up axis labels and scales.
# Label arguments: xPosition, yPosition, labelText, colour, xJustification, yJustification
$graphL->lb('reset');
foreach my $i (1..$maxXL-1) {
  $graphL->lb(new Label($i, -0.5, $i, 'black', 'center', 'middle'));
}

foreach my $i (1..$maxYL-1) {
  $graphL->lb(new Label(-0.5, $i, $i, 'black', 'center', 'middle'));
}

$graphL->lb(new Label($maxXL-0.5,0.25,'x','black','center','middle'));
$graphL->lb(new Label(0.25,$maxYL-0.5,'y','black','center','middle'));

# Defines the function to be graphed and adds it to the graph.
$c = random(8,12,1); # a constant for scaling the function
#-ULETH-#
# Defines the colour of the function line on the graph.  Uses the RGB colour scheme.
$graphL->new_color("orange", 230,159,0);
#-ENDULETH-#
$f = FEQ("x**2/$c for x in <$minXL,$maxXL> using color:orange and weight:4");
$ftex = "\frac{x^2}{$c}";
# the parentheses around $fRefL are necessary
($fRefL) = plot_functions( $graphL, $f );

# Generate arrays of x and y values for the Riemann sum.
# There are n+1 entries in each array so that we can use
# only one pair of arrays for both the left and the right
# endpoint Riemann sums.
$a = random(2,4,1); # left endpoint of interval
$b = $a+2; # right endpoint of interval
$n = 4; # number of rectangles
$deltax = ($b - $a)/$n;
foreach $k (0..$n) { $x[$k] = $a + $k * $deltax; }

foreach $k (0..$n) { $y[$k] = &{$fRefL->rule}($x[$k]); }

# Generates RGB colours for light/dark blue so they can be plugged in easily.
$skyblue = $graphL->im->colorAllocate(86,180,233);
$darkskyblue = $graphL->im->colorAllocate(38,79,233);

# Create a number of arrays of pixel references for x and y values equal to the
# number of rectangles.
foreach $k (0..$n) {
   $xpixL[$k] = $graphL->ii($x[$k]);
   $ypixL[$k] = $graphL->jj($y[$k]);
}
$xaxisL = $graphL->jj(0);

# Plot the rectangles in the Riemann sum
foreach $k (0..$n-1) {
   $graphL->im->filledRectangle($xpixL[$k],$ypixL[$k],$xpixL[$k+1],$xaxisL,$skyblue);
   $graphL->im->rectangle($xpixL[$k],$ypixL[$k],$xpixL[$k+1],$xaxisL,$darkskyblue);
}

# Create the drop-down list for the left endpoint Riemann sum.
$popupl = PopUp(["?", "overestimate of", "equal to", "underestimate of", "there is ambiguity"], "underestimate of");

#-ULETH-#
# Used to define the graph's size.
$minXR = -1;
$minYR = -1;
$maxXR = 9;
$maxYR = 9;
# The number of tick marks on each axis.
$ticksXR = 10;
$ticksYR = 10;
# Origin point for the graph.
$originXR = 0;
$originYR = 0;
# The display size for the graph when the student clicks it to enlarge it.
$pixelHorizR = 500;
$pixelVertR = 500;
#-ENDULETH-#

# Construct a graph for the right endpoint Riemann sum.
# init_graph arguments: minX, minY, maxX, maxY, origin, gridSize, graphSize
$graphR = init_graph($minXR,$minYR,$maxXR,$maxYR,ticks=>[$ticksXR,$ticksYR],
                     axes=>[$originXR,$originYR],pixels=>[$pixelHorizR,$pixelVertR]);

# Set up axis labels and scales.
# Label arguments: xPosition, yPosition, labelText, colour, xJustification, yJustification
$graphR->lb('reset');
foreach my $i (1..$maxXR-1) {
  $graphR->lb(new Label($i, -0.5, $i, 'black', 'center', 'middle'));
}

foreach my $i (1..$maxR-1) {
  $graphR->lb(new Label (-0.5, $i, $i, 'black', 'center', 'middle'));
}

$graphR->lb(new Label($maxXR-0.5,0.25,'x','black','center','middle'));
$graphR->lb(new Label(0.25,$maxYR-0.5,'y','black','center','middle'));

#-ULETH-#
# Defines the colour of the function line on the graph.  Uses the RGB colour scheme.
$graphR->new_color("orange", 230,159,0);
#-ENDULETH-#
# the parentheses around $fRefR are necessary
($fRefR) = plot_functions( $graphR, $f );


# Graph the right endpoint Riemann sum
# Generates RGB colours for light/dark blue so they can be plugged in easily.
$skyblue = $graphR->im->colorAllocate(86,180,233);
$darkskyblue = $graphR->im->colorAllocate(38,79,233);
# Create arrays of pixel references for x and y values
foreach $k (0..$n) {
   $xpixR[$k] = $graphR->ii($x[$k]);
   $ypixR[$k] = $graphR->jj($y[$k]);
}
$xaxisR = $graphR->jj(0);

# Plot the rectangles in the Riemann sum
foreach $k (1..$n) {
   $graphR->im->filledRectangle($xpixR[$k-1],$ypixR[$k],$xpixR[$k],$xaxisR,$skyblue);
   $graphR->im->rectangle($xpixR[$k-1],$ypixR[$k],$xpixR[$k],$xaxisR,$darkskyblue);
}

# Create the drop-down list for the right endpoint Riemann sum.
$popupr = PopUp(["?", "overestimate of", "equal to", "underestimate of", "there is ambiguity"], "overestimate of");


#############################
#  Main Text

#-ULETH-#
# Defines the problem text.  Note the NAMED_ANS_RULE and NAMED_POP_UP_LIST, which
# create answer entry fields with labels that can be referenced later.
# Also, NAMED_POP_UP_LIST is a drop-down with all of the listed options.
# Places the following information in column1 (the leftmost) of the layout table.
$column1 = PGML::Format(<<END_PGML);
Suppose [`` f(x) = $ftex ``].

a. The rectangles in the graph on the left illustrate a left endpoint Riemann sum
for [` f(x) `] on the interval [` $a \leq x \leq $b `].  The value of this left endpoint Riemann sum is
[@ NAMED_ANS_RULE('optional1',30) @]*
and it is an
[@ NAMED_POP_UP_LIST('optional2', ["?", "overestimate of", "equal to", "underestimate of", "there is ambiguity"]) @]*
the area of the region enclosed by [` y = f(x) `], the [` x `]-axis, and the vertical lines [` x = $a `] and [` x = $b `].

b. The rectangles in the graph on the right illustrate a right endpoint Riemann sum for [` f(x) `] on the
interval [` $a \leq x \leq $b `].  The value of this right endpoint Riemann sum is
[@ NAMED_ANS_RULE('optional3',30) @]*
and it is an
[@ NAMED_POP_UP_LIST('optional4', ["?", "overestimate of", "equal to", "underestimate of", "there is ambiguity"]) @]*
the area of the region enclosed by [` y = f(x) `], the [` x `]-axis, and the vertical lines [` x = $a `] and [` x = $b `].
END_PGML

# Places the graph image in column2 (the rightmost) of the layout table.
# The additional arguments after insertGraph($gr) specify the width and height
# of the image when it's on-screen, while the tex_size is a percentage multiplier
# determining what size the image will print at in a hard copy version.
# Also, the periods at the end of each line are necessary so that you don't have
# to put the entire "$column2 =" statement on the same line.
$column2 = $BCENTER.
image( insertGraph($graphL), height=>$pixelVertL, width=>$pixelHorizL, tex_size=>450 ).
$BR.
"Left endpoint Riemann sum".
$BR.
$BR.
image( insertGraph($graphR), height=>$pixelVertR, width=>$pixelHorizR, tex_size=>450 ).
$BR.
"Right endpoint Riemann sum".
$ECENTER;
#-ENDULETH-#

TEXT(ColumnTable($column1, $column2, indent => 0, separation => 30, valign => "TOP"));


########################################
#  Answer evaluation

#-ULETH-#
# Setting this to 1 means that students will receive feedback on whether their
# answers are correct.
$showPartialCorrectAnswers = 1;

# If you add additional questions, make sure you add answer checkers for them here!
#-ENDULETH-#

$LeftRiemannSum = 0;

#-ULETH-#
# Calculates the left Riemann sum and compares with the student's input.
foreach $k (0..$n-1) { $LeftRiemannSum = $LeftRiemannSum + $y[$k]; }
$LeftRiemannSum = Real("$deltax * $LeftRiemannSum");
# Gives a weight of 45 to the answer and compares to the student's input.
NAMED_WEIGHTED_ANS('optional1',$LeftRiemannSum->cmp(),45);

# Compares drop-down value to answer.
# Gives a weight of 5 to the answer and compares to the student's input.
NAMED_WEIGHTED_ANS('optional2',$popupl->cmp(),5);
#-ENDULETH-#

$RightRiemannSum = 0;

#-ULETH-#
# Calculates the right Riemann sum and compares with the student's input.
foreach $k (1..$n) { $RightRiemannSum = $RightRiemannSum + $y[$k]; }
$RightRiemannSum = Real("$deltax * $RightRiemannSum");
# Gives a weight of 45 to the answer and compares to the student's input.
NAMED_WEIGHTED_ANS('optional3',$RightRiemannSum->cmp(),45);

# Compares drop-down value to answer.
# Gives a weight of 5 to the answer and compares to the student's input.
NAMED_WEIGHTED_ANS('optional4',$popupr->cmp(),5);
#-ENDULETH-#


#####################################
#  Solution

#-ULETH-#
# Solution text to show after the due date.
# If you have LaTeX code you want to display, enter it here in the [``] brackets.
# If you want the previously-defined questions to display in LaTeX, include the
# MathObject in your LaTeX brackets.
BEGIN_PGML_SOLUTION
a. The left endpoint Riemann sum is
[` f([$x[0]]) \cdot 0.5 + f([$x[1]]) \cdot 0.5 + \cdots + f([$x[ $n-1 ]]) \cdot 0.5
= ( [$y[0]] + [$y[1]] + \cdots + [$y[ $n-1 ]] ) \cdot 0.5 = [$LeftRiemannSum].`]

b. The right endpoint Riemann sum is
[` f([$x[1]]) \cdot 0.5 + f([$x[2]]) \cdot 0.5 + \cdots + f([$x[ $n ]]) \cdot 0.5
= ( [$y[1]] + [$y[2]] + \cdots + [$y[ $n ]] ) \cdot 0.5  = [$RightRiemannSum].`]
END_PGML_SOLUTION

COMMENT('Uses PGML.');
#-ENDULETH-#

ENDDOCUMENT();
