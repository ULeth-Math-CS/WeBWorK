## DESCRIPTION
##   Dot Product and Angle between Vectors
## ENDDESCRIPTION

## DBsubject(Geometry)
## DBchapter(Vector geometry)
## DBsection(Lines)
## Date(2018-07-23)
## Institution(University of Lethbridge)
## Author(Mitchell Sulz-Martin)
## Static(1)
## MO(1)
## Level(3)
## KEYWORDS('ULETH-1410', 'Lines', 'Shortest Distance', 'Vector', 'Distance', 'Vector Equation')

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  # Provides greater control over the layout of the problem.
  "PGML.pl",
  # Used for course-specific initializations.
  "PGcourse.pl",
  "AnswerFormatHelp.pl",
  "answerHints.pl",
  "parserVectorUtils.pl",
);

TEXT(beginproblem());
Context("Vector");
#-ULETH-#

Context()->constants->are(t=>'Real', s=>'Real');
$t = Formula('t');
$s = Formula('s');

do{
$d1 = ColumnVector(random(2,9)*non_zero_random(-1, 1), random(2,9)*non_zero_random(-1, 1), random(2,9)*non_zero_random(-1, 1),);
$p1 = non_zero_point(3, -5, 5,);

$d2 = ColumnVector(random(2,9)*non_zero_random(-1, 1), random(2,9)*non_zero_random(-1, 1), random(2,9)*non_zero_random(-1, 1),);
$p2 = non_zero_point(3, -5, 5,);
$Line1 = Line($p1, $d1, $t,);
$Line2 = Line($p2, $d2, $s,);
}until($d1 x $d2 != Vector(0, 0, 0) && !$d1->isParallel($d2));

$N = $d1 x $d2;
$U = ColumnVector($p2 - $p1); 
$num = abs($U.$N);
$Distance = sprintf("%0.3f", $num/($N->norm));
$ans = Compute($Distance);

BEGIN_PGML
###Find the shortest distance between two nonparallel lines:  

>>[`\vec{\mathcal{L}_1} : \begin{bmatrix} x \\ y \\ z \\ \end{bmatrix} = [$p1] + [$t][$d1] \qquad\text{and}\qquad \vec{\mathcal{L}_2} : \begin{bmatrix} x \\ y \\ z \\ \end{bmatrix} = [$p2] + [$s][$d2]`]<<

The shortest distance between [`\vec{\mathcal{L}_1}`] and [`\vec{\mathcal{L}_2}`] is: [______________]
(to three decimals)
END_PGML
#-ENDULETH-#


#-ULETH-#
$showPartialCorrectAnswers = 1;
ANS($ans->cmp()->withPostFilter(AnswerHints([$Distance*(-1),]=>["Remember that distance cannot be a negative number, perhaps you forgot an absolute value in your calculation.", replaceMessage=>1])));
#-ENDULETH-#

#-ULETH-#
BEGIN_PGML_SOLUTION
The equation of the lines gives us two points, [`P`] and [`Q`] as well as two directional vectors [`d_1`] and [`d_2`].  
In order to calculate the distance between [`L_1`] and [`L_2`] we will use the following formula:  

>>[`` distance = \frac{|\vec{PQ} \cdot \vec{D}|}{\|\vec{D}\|} ``]<<

Thus we need to find the line [`\vec{PQ}`]. This is done by subtracting the two points [`Q`] and [`P`].  

[`\vec{PQ} = Q - P = [$p2] - [$p1]`]  

[`\vec{PQ} = [$U]`]  

Next we need to calculate the vector [`\vec{D}`] which is the cross product of [`d_1`] and [`d_2`].  

[`\vec{D} = d_1 \times d_2 = [$d1] \times [$d2]`]  

[`\vec{D} = [$N]`]  

Now that we have all of the parts to our formula, we can start subsituting.  

[``distance = \frac{|[$U] \cdot [$N]|}{\|[$N]\|}``]  

[``distance = \frac{| [$U.$N] |}{[$N->norm]}``]  

(REMARK: A common mistake that some students make is not taking the absolute value of the numerator. This is done to ensure that the distance between the two lines is *not* negative)  

[``distance = \frac{[$num]}{[$N->norm]}``]  

[``distance = [$Distance]``] (rounded to three decimal places).

END_PGML_SOLUTION

#-ENDULETH-#


COMMENT('
    Randomization provides plenty of different possible versions of this question.<BR>
    Includes a solution set.<BR>
    Provides a hint to the student when the formula is not fully reduced. <BR>
    Recommended Settings:<BR>
    - Weight: 2<BR>
    - Max attempts: Unlimited<BR>
    - Show me another: -2<BR>
    - Rerandomize after: Default<BR>
    Made from a ULETH template.<BR>
    ' );

ENDDOCUMENT();
